//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AyatDataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AyatEntities : DbContext
    {
        public AyatEntities()
            : base("name=AyatEntities")
        {
            this.Configuration.LazyLoadingEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ActivityLog> ActivityLogs { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<Device> Devices { get; set; }
        public virtual DbSet<UserName> UserNames { get; set; }
        public virtual DbSet<RoleIncrement> RoleIncrements { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<PaymentPlan> PaymentPlans { get; set; }
        public virtual DbSet<Access> Accesses { get; set; }
        public virtual DbSet<CommissionPayment> CommissionPayments { get; set; }
        public virtual DbSet<Sale> Sales { get; set; }
        public virtual DbSet<Commission> Commissions { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<CommissionPaymentDetail> CommissionPaymentDetails { get; set; }
    
        public virtual ObjectResult<Nullable<int>> spActivityLogInsert(string type, Nullable<int> reference, string description, Nullable<System.DateTime> dateCreated, Nullable<int> userID, Nullable<int> deviceID, string note, string remark)
        {
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var referenceParameter = reference.HasValue ?
                new ObjectParameter("reference", reference) :
                new ObjectParameter("reference", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var dateCreatedParameter = dateCreated.HasValue ?
                new ObjectParameter("dateCreated", dateCreated) :
                new ObjectParameter("dateCreated", typeof(System.DateTime));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var deviceIDParameter = deviceID.HasValue ?
                new ObjectParameter("deviceID", deviceID) :
                new ObjectParameter("deviceID", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("note", note) :
                new ObjectParameter("note", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spActivityLogInsert", typeParameter, referenceParameter, descriptionParameter, dateCreatedParameter, userIDParameter, deviceIDParameter, noteParameter, remarkParameter);
        }
    
        public virtual ObjectResult<spActivityLogSelectAll_Result> spActivityLogSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spActivityLogSelectAll_Result>("spActivityLogSelectAll");
        }
    
        public virtual int spActivityLogUpdate(Nullable<int> iD, string type, Nullable<int> reference, string description, Nullable<System.DateTime> dateCreated, Nullable<int> userID, Nullable<int> deviceID, string note, string remark)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var referenceParameter = reference.HasValue ?
                new ObjectParameter("reference", reference) :
                new ObjectParameter("reference", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var dateCreatedParameter = dateCreated.HasValue ?
                new ObjectParameter("dateCreated", dateCreated) :
                new ObjectParameter("dateCreated", typeof(System.DateTime));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var deviceIDParameter = deviceID.HasValue ?
                new ObjectParameter("deviceID", deviceID) :
                new ObjectParameter("deviceID", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("note", note) :
                new ObjectParameter("note", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spActivityLogUpdate", iDParameter, typeParameter, referenceParameter, descriptionParameter, dateCreatedParameter, userIDParameter, deviceIDParameter, noteParameter, remarkParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spCommissionInsert(Nullable<int> salesID, Nullable<int> payID, Nullable<int> empID, Nullable<int> role, Nullable<decimal> rate, Nullable<decimal> amount, Nullable<int> status, string remark)
        {
            var salesIDParameter = salesID.HasValue ?
                new ObjectParameter("salesID", salesID) :
                new ObjectParameter("salesID", typeof(int));
    
            var payIDParameter = payID.HasValue ?
                new ObjectParameter("payID", payID) :
                new ObjectParameter("payID", typeof(int));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(int));
    
            var roleParameter = role.HasValue ?
                new ObjectParameter("role", role) :
                new ObjectParameter("role", typeof(int));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("rate", rate) :
                new ObjectParameter("rate", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spCommissionInsert", salesIDParameter, payIDParameter, empIDParameter, roleParameter, rateParameter, amountParameter, statusParameter, remarkParameter);
        }
    
        public virtual ObjectResult<Commission> spCommissionSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Commission>("spCommissionSelectAll");
        }
    
        public virtual ObjectResult<Commission> spCommissionSelectAll(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Commission>("spCommissionSelectAll", mergeOption);
        }
    
        public virtual int spCommissionUpdate(Nullable<int> iD, Nullable<int> salesID, Nullable<int> payID, Nullable<int> empID, Nullable<int> role, Nullable<decimal> rate, Nullable<decimal> amount, Nullable<int> status, string remark)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var salesIDParameter = salesID.HasValue ?
                new ObjectParameter("salesID", salesID) :
                new ObjectParameter("salesID", typeof(int));
    
            var payIDParameter = payID.HasValue ?
                new ObjectParameter("payID", payID) :
                new ObjectParameter("payID", typeof(int));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(int));
    
            var roleParameter = role.HasValue ?
                new ObjectParameter("role", role) :
                new ObjectParameter("role", typeof(int));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("rate", rate) :
                new ObjectParameter("rate", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCommissionUpdate", iDParameter, salesIDParameter, payIDParameter, empIDParameter, roleParameter, rateParameter, amountParameter, statusParameter, remarkParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spCompanyInsert(string name, string tIN, string website, string branch, string telephone, string mobile, string fax, string email, string city, string subCity, string woreda, string houseNo, string remark)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var tINParameter = tIN != null ?
                new ObjectParameter("TIN", tIN) :
                new ObjectParameter("TIN", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("website", website) :
                new ObjectParameter("website", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("branch", branch) :
                new ObjectParameter("branch", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("telephone", telephone) :
                new ObjectParameter("telephone", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("mobile", mobile) :
                new ObjectParameter("mobile", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("fax", fax) :
                new ObjectParameter("fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var subCityParameter = subCity != null ?
                new ObjectParameter("subCity", subCity) :
                new ObjectParameter("subCity", typeof(string));
    
            var woredaParameter = woreda != null ?
                new ObjectParameter("woreda", woreda) :
                new ObjectParameter("woreda", typeof(string));
    
            var houseNoParameter = houseNo != null ?
                new ObjectParameter("houseNo", houseNo) :
                new ObjectParameter("houseNo", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spCompanyInsert", nameParameter, tINParameter, websiteParameter, branchParameter, telephoneParameter, mobileParameter, faxParameter, emailParameter, cityParameter, subCityParameter, woredaParameter, houseNoParameter, remarkParameter);
        }
    
        public virtual ObjectResult<spCompanySelectAll_Result> spCompanySelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCompanySelectAll_Result>("spCompanySelectAll");
        }
    
        public virtual int spCompanyUpdate(Nullable<int> iD, string name, string tIN, string website, string branch, string telephone, string mobile, string fax, string email, string city, string subCity, string woreda, string houseNo, string remark)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var tINParameter = tIN != null ?
                new ObjectParameter("TIN", tIN) :
                new ObjectParameter("TIN", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("website", website) :
                new ObjectParameter("website", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("branch", branch) :
                new ObjectParameter("branch", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("telephone", telephone) :
                new ObjectParameter("telephone", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("mobile", mobile) :
                new ObjectParameter("mobile", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("fax", fax) :
                new ObjectParameter("fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var subCityParameter = subCity != null ?
                new ObjectParameter("subCity", subCity) :
                new ObjectParameter("subCity", typeof(string));
    
            var woredaParameter = woreda != null ?
                new ObjectParameter("woreda", woreda) :
                new ObjectParameter("woreda", typeof(string));
    
            var houseNoParameter = houseNo != null ?
                new ObjectParameter("houseNo", houseNo) :
                new ObjectParameter("houseNo", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCompanyUpdate", iDParameter, nameParameter, tINParameter, websiteParameter, branchParameter, telephoneParameter, mobileParameter, faxParameter, emailParameter, cityParameter, subCityParameter, woredaParameter, houseNoParameter, remarkParameter);
        }
    
        public virtual int spDeleteActivityLogByid(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteActivityLogByid", idParameter);
        }
    
        public virtual int spDeleteAllActivityLog()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteAllActivityLog");
        }
    
        public virtual int spDeleteAllCommission()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteAllCommission");
        }
    
        public virtual int spDeleteAllCompany()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteAllCompany");
        }
    
        public virtual int spDeleteAllDevice()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteAllDevice");
        }
    
        public virtual int spDeleteAllEmployee()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteAllEmployee");
        }
    
        public virtual int spDeleteAllPayment()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteAllPayment");
        }
    
        public virtual int spDeleteAllPaymentPlan()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteAllPaymentPlan");
        }
    
        public virtual int spDeleteAllRole()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteAllRole");
        }
    
        public virtual int spDeleteAllRoleIncrements()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteAllRoleIncrements");
        }
    
        public virtual int spDeleteAllSales()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteAllSales");
        }
    
        public virtual int spDeleteAllUserName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteAllUserName");
        }
    
        public virtual int spDeleteCommissionByid(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteCommissionByid", idParameter);
        }
    
        public virtual int spDeleteCompanyByid(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteCompanyByid", idParameter);
        }
    
        public virtual int spDeleteDeviceByid(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteDeviceByid", idParameter);
        }
    
        public virtual int spDeleteEmployeeByid(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteEmployeeByid", idParameter);
        }
    
        public virtual int spDeletePaymentByid(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeletePaymentByid", idParameter);
        }
    
        public virtual int spDeletePaymentPlanByid(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeletePaymentPlanByid", idParameter);
        }
    
        public virtual int spDeleteRoleByid(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteRoleByid", idParameter);
        }
    
        public virtual int spDeleteRoleIncrementsByid(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteRoleIncrementsByid", idParameter);
        }
    
        public virtual int spDeleteRoleIncrementsByRole(Nullable<int> roleID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("roleID", roleID) :
                new ObjectParameter("roleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteRoleIncrementsByRole", roleIDParameter);
        }
    
        public virtual int spDeleteSalesByid(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteSalesByid", idParameter);
        }
    
        public virtual int spDeleteUserNameByid(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteUserNameByid", idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spDeviceInsert(string type, string deviceName, Nullable<bool> isActive, string iP, string connectionType, string value, string brand, string model, string mAC, string port, string remark)
        {
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var deviceNameParameter = deviceName != null ?
                new ObjectParameter("deviceName", deviceName) :
                new ObjectParameter("deviceName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            var connectionTypeParameter = connectionType != null ?
                new ObjectParameter("connectionType", connectionType) :
                new ObjectParameter("connectionType", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("brand", brand) :
                new ObjectParameter("brand", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("model", model) :
                new ObjectParameter("model", typeof(string));
    
            var mACParameter = mAC != null ?
                new ObjectParameter("MAC", mAC) :
                new ObjectParameter("MAC", typeof(string));
    
            var portParameter = port != null ?
                new ObjectParameter("port", port) :
                new ObjectParameter("port", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spDeviceInsert", typeParameter, deviceNameParameter, isActiveParameter, iPParameter, connectionTypeParameter, valueParameter, brandParameter, modelParameter, mACParameter, portParameter, remarkParameter);
        }
    
        public virtual ObjectResult<Device> spDeviceSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Device>("spDeviceSelectAll");
        }
    
        public virtual ObjectResult<Device> spDeviceSelectAll(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Device>("spDeviceSelectAll", mergeOption);
        }
    
        public virtual int spDeviceUpdate(Nullable<int> iD, string type, string deviceName, Nullable<bool> isActive, string iP, string connectionType, string value, string brand, string model, string mAC, string port, string remark)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var deviceNameParameter = deviceName != null ?
                new ObjectParameter("deviceName", deviceName) :
                new ObjectParameter("deviceName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            var connectionTypeParameter = connectionType != null ?
                new ObjectParameter("connectionType", connectionType) :
                new ObjectParameter("connectionType", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("brand", brand) :
                new ObjectParameter("brand", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("model", model) :
                new ObjectParameter("model", typeof(string));
    
            var mACParameter = mAC != null ?
                new ObjectParameter("MAC", mAC) :
                new ObjectParameter("MAC", typeof(string));
    
            var portParameter = port != null ?
                new ObjectParameter("port", port) :
                new ObjectParameter("port", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeviceUpdate", iDParameter, typeParameter, deviceNameParameter, isActiveParameter, iPParameter, connectionTypeParameter, valueParameter, brandParameter, modelParameter, mACParameter, portParameter, remarkParameter);
        }
    
        public virtual ObjectResult<Employee> spEmployeeSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Employee>("spEmployeeSelectAll");
        }
    
        public virtual ObjectResult<Employee> spEmployeeSelectAll(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Employee>("spEmployeeSelectAll", mergeOption);
        }
    
        public virtual ObjectResult<spGetActivityLogByid_Result> spGetActivityLogByid(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetActivityLogByid_Result>("spGetActivityLogByid", idParameter);
        }
    
        public virtual ObjectResult<spGetCommissionByid_Result> spGetCommissionByid(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCommissionByid_Result>("spGetCommissionByid", idParameter);
        }
    
        public virtual ObjectResult<spGetCompanyByid_Result> spGetCompanyByid(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCompanyByid_Result>("spGetCompanyByid", idParameter);
        }
    
        public virtual ObjectResult<spGetDeviceByid_Result> spGetDeviceByid(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetDeviceByid_Result>("spGetDeviceByid", idParameter);
        }
    
        public virtual ObjectResult<Device> spGetDeviceByName(string deviceName)
        {
            var deviceNameParameter = deviceName != null ?
                new ObjectParameter("deviceName", deviceName) :
                new ObjectParameter("deviceName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Device>("spGetDeviceByName", deviceNameParameter);
        }
    
        public virtual ObjectResult<Device> spGetDeviceByName(string deviceName, MergeOption mergeOption)
        {
            var deviceNameParameter = deviceName != null ?
                new ObjectParameter("deviceName", deviceName) :
                new ObjectParameter("deviceName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Device>("spGetDeviceByName", mergeOption, deviceNameParameter);
        }
    
        public virtual ObjectResult<Employee> spGetEmployeeByid(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Employee>("spGetEmployeeByid", idParameter);
        }
    
        public virtual ObjectResult<Employee> spGetEmployeeByid(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Employee>("spGetEmployeeByid", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<Payment> spGetPaymentByid(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Payment>("spGetPaymentByid", idParameter);
        }
    
        public virtual ObjectResult<Payment> spGetPaymentByid(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Payment>("spGetPaymentByid", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<PaymentPlan> spGetPaymentPlanByid(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PaymentPlan>("spGetPaymentPlanByid", idParameter);
        }
    
        public virtual ObjectResult<PaymentPlan> spGetPaymentPlanByid(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PaymentPlan>("spGetPaymentPlanByid", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<spGetRoleByid_Result> spGetRoleByid(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetRoleByid_Result>("spGetRoleByid", idParameter);
        }
    
        public virtual ObjectResult<spGetRoleIncrementsByid_Result> spGetRoleIncrementsByid(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetRoleIncrementsByid_Result>("spGetRoleIncrementsByid", idParameter);
        }
    
        public virtual ObjectResult<Sale> spGetSalesByid(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sale>("spGetSalesByid", idParameter);
        }
    
        public virtual ObjectResult<Sale> spGetSalesByid(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sale>("spGetSalesByid", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<spGetStoredProcedure_Result> spGetStoredProcedure()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetStoredProcedure_Result>("spGetStoredProcedure");
        }
    
        public virtual ObjectResult<spGetStoredProcuderecoldata_Result> spGetStoredProcuderecoldata(string spname)
        {
            var spnameParameter = spname != null ?
                new ObjectParameter("spname", spname) :
                new ObjectParameter("spname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetStoredProcuderecoldata_Result>("spGetStoredProcuderecoldata", spnameParameter);
        }
    
        public virtual ObjectResult<spGetTABLE_Result> spGetTABLE()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetTABLE_Result>("spGetTABLE");
        }
    
        public virtual ObjectResult<spGetTablecoldata_Result> spGetTablecoldata(string tablename)
        {
            var tablenameParameter = tablename != null ?
                new ObjectParameter("tablename", tablename) :
                new ObjectParameter("tablename", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetTablecoldata_Result>("spGetTablecoldata", tablenameParameter);
        }
    
        public virtual ObjectResult<spGetUserNameByid_Result> spGetUserNameByid(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUserNameByid_Result>("spGetUserNameByid", idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spPaymentInsert(Nullable<int> salesID, Nullable<int> payID, string fsNo, string recieptNo, Nullable<System.DateTime> date, Nullable<decimal> amount, string remark)
        {
            var salesIDParameter = salesID.HasValue ?
                new ObjectParameter("salesID", salesID) :
                new ObjectParameter("salesID", typeof(int));
    
            var payIDParameter = payID.HasValue ?
                new ObjectParameter("payID", payID) :
                new ObjectParameter("payID", typeof(int));
    
            var fsNoParameter = fsNo != null ?
                new ObjectParameter("fsNo", fsNo) :
                new ObjectParameter("fsNo", typeof(string));
    
            var recieptNoParameter = recieptNo != null ?
                new ObjectParameter("recieptNo", recieptNo) :
                new ObjectParameter("recieptNo", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spPaymentInsert", salesIDParameter, payIDParameter, fsNoParameter, recieptNoParameter, dateParameter, amountParameter, remarkParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spPaymentPlanInsert(Nullable<int> salesID, string description, Nullable<decimal> payRate, Nullable<decimal> payAmount, Nullable<decimal> paidAmount, Nullable<decimal> remainingAmount, Nullable<int> payStatus, Nullable<decimal> commRate, Nullable<decimal> commAmount, string remark)
        {
            var salesIDParameter = salesID.HasValue ?
                new ObjectParameter("salesID", salesID) :
                new ObjectParameter("salesID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var payRateParameter = payRate.HasValue ?
                new ObjectParameter("payRate", payRate) :
                new ObjectParameter("payRate", typeof(decimal));
    
            var payAmountParameter = payAmount.HasValue ?
                new ObjectParameter("payAmount", payAmount) :
                new ObjectParameter("payAmount", typeof(decimal));
    
            var paidAmountParameter = paidAmount.HasValue ?
                new ObjectParameter("paidAmount", paidAmount) :
                new ObjectParameter("paidAmount", typeof(decimal));
    
            var remainingAmountParameter = remainingAmount.HasValue ?
                new ObjectParameter("RemainingAmount", remainingAmount) :
                new ObjectParameter("RemainingAmount", typeof(decimal));
    
            var payStatusParameter = payStatus.HasValue ?
                new ObjectParameter("payStatus", payStatus) :
                new ObjectParameter("payStatus", typeof(int));
    
            var commRateParameter = commRate.HasValue ?
                new ObjectParameter("commRate", commRate) :
                new ObjectParameter("commRate", typeof(decimal));
    
            var commAmountParameter = commAmount.HasValue ?
                new ObjectParameter("commAmount", commAmount) :
                new ObjectParameter("commAmount", typeof(decimal));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spPaymentPlanInsert", salesIDParameter, descriptionParameter, payRateParameter, payAmountParameter, paidAmountParameter, remainingAmountParameter, payStatusParameter, commRateParameter, commAmountParameter, remarkParameter);
        }
    
        public virtual ObjectResult<PaymentPlan> spPaymentPlanSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PaymentPlan>("spPaymentPlanSelectAll");
        }
    
        public virtual ObjectResult<PaymentPlan> spPaymentPlanSelectAll(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PaymentPlan>("spPaymentPlanSelectAll", mergeOption);
        }
    
        public virtual int spPaymentPlanUpdate(Nullable<int> iD, Nullable<int> salesID, string description, Nullable<decimal> payRate, Nullable<decimal> payAmount, Nullable<decimal> paidAmount, Nullable<decimal> remainingAmount, Nullable<int> payStatus, Nullable<decimal> commRate, Nullable<decimal> commAmount, string remark)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var salesIDParameter = salesID.HasValue ?
                new ObjectParameter("salesID", salesID) :
                new ObjectParameter("salesID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var payRateParameter = payRate.HasValue ?
                new ObjectParameter("payRate", payRate) :
                new ObjectParameter("payRate", typeof(decimal));
    
            var payAmountParameter = payAmount.HasValue ?
                new ObjectParameter("payAmount", payAmount) :
                new ObjectParameter("payAmount", typeof(decimal));
    
            var paidAmountParameter = paidAmount.HasValue ?
                new ObjectParameter("paidAmount", paidAmount) :
                new ObjectParameter("paidAmount", typeof(decimal));
    
            var remainingAmountParameter = remainingAmount.HasValue ?
                new ObjectParameter("RemainingAmount", remainingAmount) :
                new ObjectParameter("RemainingAmount", typeof(decimal));
    
            var payStatusParameter = payStatus.HasValue ?
                new ObjectParameter("payStatus", payStatus) :
                new ObjectParameter("payStatus", typeof(int));
    
            var commRateParameter = commRate.HasValue ?
                new ObjectParameter("commRate", commRate) :
                new ObjectParameter("commRate", typeof(decimal));
    
            var commAmountParameter = commAmount.HasValue ?
                new ObjectParameter("commAmount", commAmount) :
                new ObjectParameter("commAmount", typeof(decimal));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPaymentPlanUpdate", iDParameter, salesIDParameter, descriptionParameter, payRateParameter, payAmountParameter, paidAmountParameter, remainingAmountParameter, payStatusParameter, commRateParameter, commAmountParameter, remarkParameter);
        }
    
        public virtual ObjectResult<Payment> spPaymentSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Payment>("spPaymentSelectAll");
        }
    
        public virtual ObjectResult<Payment> spPaymentSelectAll(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Payment>("spPaymentSelectAll", mergeOption);
        }
    
        public virtual int spPaymentUpdate(Nullable<int> iD, Nullable<int> salesID, Nullable<int> payID, string fsNo, string recieptNo, Nullable<System.DateTime> date, Nullable<decimal> amount, string remark)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var salesIDParameter = salesID.HasValue ?
                new ObjectParameter("salesID", salesID) :
                new ObjectParameter("salesID", typeof(int));
    
            var payIDParameter = payID.HasValue ?
                new ObjectParameter("payID", payID) :
                new ObjectParameter("payID", typeof(int));
    
            var fsNoParameter = fsNo != null ?
                new ObjectParameter("fsNo", fsNo) :
                new ObjectParameter("fsNo", typeof(string));
    
            var recieptNoParameter = recieptNo != null ?
                new ObjectParameter("recieptNo", recieptNo) :
                new ObjectParameter("recieptNo", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPaymentUpdate", iDParameter, salesIDParameter, payIDParameter, fsNoParameter, recieptNoParameter, dateParameter, amountParameter, remarkParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spRoleIncrementsInsert(Nullable<int> roleID, Nullable<decimal> percentage, Nullable<decimal> increment, string remark)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("roleID", roleID) :
                new ObjectParameter("roleID", typeof(int));
    
            var percentageParameter = percentage.HasValue ?
                new ObjectParameter("percentage", percentage) :
                new ObjectParameter("percentage", typeof(decimal));
    
            var incrementParameter = increment.HasValue ?
                new ObjectParameter("increment", increment) :
                new ObjectParameter("increment", typeof(decimal));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spRoleIncrementsInsert", roleIDParameter, percentageParameter, incrementParameter, remarkParameter);
        }
    
        public virtual ObjectResult<spRoleIncrementsSelectAll_Result> spRoleIncrementsSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRoleIncrementsSelectAll_Result>("spRoleIncrementsSelectAll");
        }
    
        public virtual ObjectResult<RoleIncrement> spRoleIncrementsSelectByRole(Nullable<int> roleID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("roleID", roleID) :
                new ObjectParameter("roleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RoleIncrement>("spRoleIncrementsSelectByRole", roleIDParameter);
        }
    
        public virtual ObjectResult<RoleIncrement> spRoleIncrementsSelectByRole(Nullable<int> roleID, MergeOption mergeOption)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("roleID", roleID) :
                new ObjectParameter("roleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RoleIncrement>("spRoleIncrementsSelectByRole", mergeOption, roleIDParameter);
        }
    
        public virtual int spRoleIncrementsUpdate(Nullable<int> iD, Nullable<int> roleID, Nullable<decimal> percentage, Nullable<decimal> increment, string remark)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("roleID", roleID) :
                new ObjectParameter("roleID", typeof(int));
    
            var percentageParameter = percentage.HasValue ?
                new ObjectParameter("percentage", percentage) :
                new ObjectParameter("percentage", typeof(decimal));
    
            var incrementParameter = increment.HasValue ?
                new ObjectParameter("increment", increment) :
                new ObjectParameter("increment", typeof(decimal));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRoleIncrementsUpdate", iDParameter, roleIDParameter, percentageParameter, incrementParameter, remarkParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spRoleInsert(string description, Nullable<int> parent, Nullable<decimal> cashRF, Nullable<decimal> cashSF, Nullable<decimal> loanRF, Nullable<int> type, Nullable<int> orderIndex, string remark)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var parentParameter = parent.HasValue ?
                new ObjectParameter("parent", parent) :
                new ObjectParameter("parent", typeof(int));
    
            var cashRFParameter = cashRF.HasValue ?
                new ObjectParameter("cashRF", cashRF) :
                new ObjectParameter("cashRF", typeof(decimal));
    
            var cashSFParameter = cashSF.HasValue ?
                new ObjectParameter("cashSF", cashSF) :
                new ObjectParameter("cashSF", typeof(decimal));
    
            var loanRFParameter = loanRF.HasValue ?
                new ObjectParameter("loanRF", loanRF) :
                new ObjectParameter("loanRF", typeof(decimal));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            var orderIndexParameter = orderIndex.HasValue ?
                new ObjectParameter("orderIndex", orderIndex) :
                new ObjectParameter("orderIndex", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spRoleInsert", descriptionParameter, parentParameter, cashRFParameter, cashSFParameter, loanRFParameter, typeParameter, orderIndexParameter, remarkParameter);
        }
    
        public virtual ObjectResult<spRoleSelectAll_Result> spRoleSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRoleSelectAll_Result>("spRoleSelectAll");
        }
    
        public virtual int spRoleUpdate(Nullable<int> iD, string description, Nullable<int> parent, Nullable<decimal> cashRF, Nullable<decimal> cashSF, Nullable<decimal> loanRF, Nullable<int> type, Nullable<int> orderIndex, string remark)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var parentParameter = parent.HasValue ?
                new ObjectParameter("parent", parent) :
                new ObjectParameter("parent", typeof(int));
    
            var cashRFParameter = cashRF.HasValue ?
                new ObjectParameter("cashRF", cashRF) :
                new ObjectParameter("cashRF", typeof(decimal));
    
            var cashSFParameter = cashSF.HasValue ?
                new ObjectParameter("cashSF", cashSF) :
                new ObjectParameter("cashSF", typeof(decimal));
    
            var loanRFParameter = loanRF.HasValue ?
                new ObjectParameter("loanRF", loanRF) :
                new ObjectParameter("loanRF", typeof(decimal));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            var orderIndexParameter = orderIndex.HasValue ?
                new ObjectParameter("orderIndex", orderIndex) :
                new ObjectParameter("orderIndex", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRoleUpdate", iDParameter, descriptionParameter, parentParameter, cashRFParameter, cashSFParameter, loanRFParameter, typeParameter, orderIndexParameter, remarkParameter);
        }
    
        public virtual ObjectResult<Sale> spSalesSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sale>("spSalesSelectAll");
        }
    
        public virtual ObjectResult<Sale> spSalesSelectAll(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sale>("spSalesSelectAll", mergeOption);
        }
    
        public virtual ObjectResult<Nullable<int>> spUserNameInsert(Nullable<int> empID, string name, string password, string hint, Nullable<bool> isActive, string remark)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var hintParameter = hint != null ?
                new ObjectParameter("hint", hint) :
                new ObjectParameter("hint", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spUserNameInsert", empIDParameter, nameParameter, passwordParameter, hintParameter, isActiveParameter, remarkParameter);
        }
    
        public virtual ObjectResult<UserName> spUserNameSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserName>("spUserNameSelectAll");
        }
    
        public virtual ObjectResult<UserName> spUserNameSelectAll(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserName>("spUserNameSelectAll", mergeOption);
        }
    
        public virtual int spUserNameUpdate(Nullable<int> iD, Nullable<int> empID, string name, string password, string hint, Nullable<bool> isActive, string remark)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var hintParameter = hint != null ?
                new ObjectParameter("hint", hint) :
                new ObjectParameter("hint", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUserNameUpdate", iDParameter, empIDParameter, nameParameter, passwordParameter, hintParameter, isActiveParameter, remarkParameter);
        }
    
        public virtual int spDeletePaymentPlanBySalesId(Nullable<int> salesId)
        {
            var salesIdParameter = salesId.HasValue ?
                new ObjectParameter("salesId", salesId) :
                new ObjectParameter("salesId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeletePaymentPlanBySalesId", salesIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spEmployeeInsert(string firstName, string middleName, string lastName, string fullName, string gender, byte[] picture, Nullable<int> role, Nullable<bool> isActive, string status, Nullable<System.DateTime> hiredate, Nullable<System.DateTime> dob, string city, string homephone, string mobilephone, string email, Nullable<int> supervisor, byte[] image, string remark)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("middleName", middleName) :
                new ObjectParameter("middleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("fullName", fullName) :
                new ObjectParameter("fullName", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            var pictureParameter = picture != null ?
                new ObjectParameter("picture", picture) :
                new ObjectParameter("picture", typeof(byte[]));
    
            var roleParameter = role.HasValue ?
                new ObjectParameter("role", role) :
                new ObjectParameter("role", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var hiredateParameter = hiredate.HasValue ?
                new ObjectParameter("hiredate", hiredate) :
                new ObjectParameter("hiredate", typeof(System.DateTime));
    
            var dobParameter = dob.HasValue ?
                new ObjectParameter("dob", dob) :
                new ObjectParameter("dob", typeof(System.DateTime));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var homephoneParameter = homephone != null ?
                new ObjectParameter("homephone", homephone) :
                new ObjectParameter("homephone", typeof(string));
    
            var mobilephoneParameter = mobilephone != null ?
                new ObjectParameter("mobilephone", mobilephone) :
                new ObjectParameter("mobilephone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var supervisorParameter = supervisor.HasValue ?
                new ObjectParameter("supervisor", supervisor) :
                new ObjectParameter("supervisor", typeof(int));
    
            var imageParameter = image != null ?
                new ObjectParameter("image", image) :
                new ObjectParameter("image", typeof(byte[]));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spEmployeeInsert", firstNameParameter, middleNameParameter, lastNameParameter, fullNameParameter, genderParameter, pictureParameter, roleParameter, isActiveParameter, statusParameter, hiredateParameter, dobParameter, cityParameter, homephoneParameter, mobilephoneParameter, emailParameter, supervisorParameter, imageParameter, remarkParameter);
        }
    
        public virtual int spEmployeeUpdate(Nullable<int> iD, string firstName, string middleName, string lastName, string fullName, string gender, byte[] picture, Nullable<int> role, Nullable<bool> isActive, string status, Nullable<System.DateTime> hiredate, Nullable<System.DateTime> dob, string city, string homephone, string mobilephone, string email, Nullable<int> supervisor, byte[] image, string remark)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("middleName", middleName) :
                new ObjectParameter("middleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("fullName", fullName) :
                new ObjectParameter("fullName", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            var pictureParameter = picture != null ?
                new ObjectParameter("picture", picture) :
                new ObjectParameter("picture", typeof(byte[]));
    
            var roleParameter = role.HasValue ?
                new ObjectParameter("role", role) :
                new ObjectParameter("role", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var hiredateParameter = hiredate.HasValue ?
                new ObjectParameter("hiredate", hiredate) :
                new ObjectParameter("hiredate", typeof(System.DateTime));
    
            var dobParameter = dob.HasValue ?
                new ObjectParameter("dob", dob) :
                new ObjectParameter("dob", typeof(System.DateTime));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var homephoneParameter = homephone != null ?
                new ObjectParameter("homephone", homephone) :
                new ObjectParameter("homephone", typeof(string));
    
            var mobilephoneParameter = mobilephone != null ?
                new ObjectParameter("mobilephone", mobilephone) :
                new ObjectParameter("mobilephone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var supervisorParameter = supervisor.HasValue ?
                new ObjectParameter("supervisor", supervisor) :
                new ObjectParameter("supervisor", typeof(int));
    
            var imageParameter = image != null ?
                new ObjectParameter("image", image) :
                new ObjectParameter("image", typeof(byte[]));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEmployeeUpdate", iDParameter, firstNameParameter, middleNameParameter, lastNameParameter, fullNameParameter, genderParameter, pictureParameter, roleParameter, isActiveParameter, statusParameter, hiredateParameter, dobParameter, cityParameter, homephoneParameter, mobilephoneParameter, emailParameter, supervisorParameter, imageParameter, remarkParameter);
        }
    
        public virtual ObjectResult<PaymentPlan> spGetPaymentPlanBySalesID(Nullable<int> salesID)
        {
            var salesIDParameter = salesID.HasValue ?
                new ObjectParameter("salesID", salesID) :
                new ObjectParameter("salesID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PaymentPlan>("spGetPaymentPlanBySalesID", salesIDParameter);
        }
    
        public virtual ObjectResult<PaymentPlan> spGetPaymentPlanBySalesID(Nullable<int> salesID, MergeOption mergeOption)
        {
            var salesIDParameter = salesID.HasValue ?
                new ObjectParameter("salesID", salesID) :
                new ObjectParameter("salesID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PaymentPlan>("spGetPaymentPlanBySalesID", mergeOption, salesIDParameter);
        }
    
        public virtual ObjectResult<Sale> spGetSalesList(string iD, string user, string name, string startDateTime, string endDateTime, string site, string building, string floorNo, string houseNo, string houseType, string area, string bedroom, string device, string isactive, string status, string code)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var startDateTimeParameter = startDateTime != null ?
                new ObjectParameter("startDateTime", startDateTime) :
                new ObjectParameter("startDateTime", typeof(string));
    
            var endDateTimeParameter = endDateTime != null ?
                new ObjectParameter("endDateTime", endDateTime) :
                new ObjectParameter("endDateTime", typeof(string));
    
            var siteParameter = site != null ?
                new ObjectParameter("Site", site) :
                new ObjectParameter("Site", typeof(string));
    
            var buildingParameter = building != null ?
                new ObjectParameter("Building", building) :
                new ObjectParameter("Building", typeof(string));
    
            var floorNoParameter = floorNo != null ?
                new ObjectParameter("FloorNo", floorNo) :
                new ObjectParameter("FloorNo", typeof(string));
    
            var houseNoParameter = houseNo != null ?
                new ObjectParameter("HouseNo", houseNo) :
                new ObjectParameter("HouseNo", typeof(string));
    
            var houseTypeParameter = houseType != null ?
                new ObjectParameter("HouseType", houseType) :
                new ObjectParameter("HouseType", typeof(string));
    
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var bedroomParameter = bedroom != null ?
                new ObjectParameter("bedroom", bedroom) :
                new ObjectParameter("bedroom", typeof(string));
    
            var deviceParameter = device != null ?
                new ObjectParameter("device", device) :
                new ObjectParameter("device", typeof(string));
    
            var isactiveParameter = isactive != null ?
                new ObjectParameter("isactive", isactive) :
                new ObjectParameter("isactive", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sale>("spGetSalesList", iDParameter, userParameter, nameParameter, startDateTimeParameter, endDateTimeParameter, siteParameter, buildingParameter, floorNoParameter, houseNoParameter, houseTypeParameter, areaParameter, bedroomParameter, deviceParameter, isactiveParameter, statusParameter, codeParameter);
        }
    
        public virtual ObjectResult<Sale> spGetSalesList(string iD, string user, string name, string startDateTime, string endDateTime, string site, string building, string floorNo, string houseNo, string houseType, string area, string bedroom, string device, string isactive, string status, string code, MergeOption mergeOption)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var startDateTimeParameter = startDateTime != null ?
                new ObjectParameter("startDateTime", startDateTime) :
                new ObjectParameter("startDateTime", typeof(string));
    
            var endDateTimeParameter = endDateTime != null ?
                new ObjectParameter("endDateTime", endDateTime) :
                new ObjectParameter("endDateTime", typeof(string));
    
            var siteParameter = site != null ?
                new ObjectParameter("Site", site) :
                new ObjectParameter("Site", typeof(string));
    
            var buildingParameter = building != null ?
                new ObjectParameter("Building", building) :
                new ObjectParameter("Building", typeof(string));
    
            var floorNoParameter = floorNo != null ?
                new ObjectParameter("FloorNo", floorNo) :
                new ObjectParameter("FloorNo", typeof(string));
    
            var houseNoParameter = houseNo != null ?
                new ObjectParameter("HouseNo", houseNo) :
                new ObjectParameter("HouseNo", typeof(string));
    
            var houseTypeParameter = houseType != null ?
                new ObjectParameter("HouseType", houseType) :
                new ObjectParameter("HouseType", typeof(string));
    
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var bedroomParameter = bedroom != null ?
                new ObjectParameter("bedroom", bedroom) :
                new ObjectParameter("bedroom", typeof(string));
    
            var deviceParameter = device != null ?
                new ObjectParameter("device", device) :
                new ObjectParameter("device", typeof(string));
    
            var isactiveParameter = isactive != null ?
                new ObjectParameter("isactive", isactive) :
                new ObjectParameter("isactive", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sale>("spGetSalesList", mergeOption, iDParameter, userParameter, nameParameter, startDateTimeParameter, endDateTimeParameter, siteParameter, buildingParameter, floorNoParameter, houseNoParameter, houseTypeParameter, areaParameter, bedroomParameter, deviceParameter, isactiveParameter, statusParameter, codeParameter);
        }
    
        public virtual ObjectResult<Commission> spGetCommissionBySaleId(Nullable<int> salesId)
        {
            var salesIdParameter = salesId.HasValue ?
                new ObjectParameter("SalesId", salesId) :
                new ObjectParameter("SalesId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Commission>("spGetCommissionBySaleId", salesIdParameter);
        }
    
        public virtual ObjectResult<Commission> spGetCommissionBySaleId(Nullable<int> salesId, MergeOption mergeOption)
        {
            var salesIdParameter = salesId.HasValue ?
                new ObjectParameter("SalesId", salesId) :
                new ObjectParameter("SalesId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Commission>("spGetCommissionBySaleId", mergeOption, salesIdParameter);
        }
    
        public virtual ObjectResult<Payment> spGetPaymentBySalesId(Nullable<int> salesId)
        {
            var salesIdParameter = salesId.HasValue ?
                new ObjectParameter("SalesId", salesId) :
                new ObjectParameter("SalesId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Payment>("spGetPaymentBySalesId", salesIdParameter);
        }
    
        public virtual ObjectResult<Payment> spGetPaymentBySalesId(Nullable<int> salesId, MergeOption mergeOption)
        {
            var salesIdParameter = salesId.HasValue ?
                new ObjectParameter("SalesId", salesId) :
                new ObjectParameter("SalesId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Payment>("spGetPaymentBySalesId", mergeOption, salesIdParameter);
        }
    
        public virtual ObjectResult<Commission> spGetCommissionByPaymentPlanId(Nullable<int> paymentPlanId)
        {
            var paymentPlanIdParameter = paymentPlanId.HasValue ?
                new ObjectParameter("PaymentPlanId", paymentPlanId) :
                new ObjectParameter("PaymentPlanId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Commission>("spGetCommissionByPaymentPlanId", paymentPlanIdParameter);
        }
    
        public virtual ObjectResult<Commission> spGetCommissionByPaymentPlanId(Nullable<int> paymentPlanId, MergeOption mergeOption)
        {
            var paymentPlanIdParameter = paymentPlanId.HasValue ?
                new ObjectParameter("PaymentPlanId", paymentPlanId) :
                new ObjectParameter("PaymentPlanId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Commission>("spGetCommissionByPaymentPlanId", mergeOption, paymentPlanIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spAccessInsert(Nullable<int> userID, Nullable<int> accessPrivilage, string remark)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var accessPrivilageParameter = accessPrivilage.HasValue ?
                new ObjectParameter("accessPrivilage", accessPrivilage) :
                new ObjectParameter("accessPrivilage", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spAccessInsert", userIDParameter, accessPrivilageParameter, remarkParameter);
        }
    
        public virtual int spDeleteAccessByuserid(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteAccessByuserid", userIdParameter);
        }
    
        public virtual ObjectResult<Access> spGetAccessByuserid(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Access>("spGetAccessByuserid", userIdParameter);
        }
    
        public virtual ObjectResult<Access> spGetAccessByuserid(Nullable<int> userId, MergeOption mergeOption)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Access>("spGetAccessByuserid", mergeOption, userIdParameter);
        }
    
        public virtual ObjectResult<spDashboardGetPaymentTotalValue_Result> spDashboardGetPaymentTotalValue(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> groupBy)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var groupByParameter = groupBy.HasValue ?
                new ObjectParameter("groupBy", groupBy) :
                new ObjectParameter("groupBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDashboardGetPaymentTotalValue_Result>("spDashboardGetPaymentTotalValue", fromDateParameter, toDateParameter, groupByParameter);
        }
    
        public virtual ObjectResult<spDashboardGetSalesTotalValue_Result> spDashboardGetSalesTotalValue(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> groupBy)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var groupByParameter = groupBy.HasValue ?
                new ObjectParameter("groupBy", groupBy) :
                new ObjectParameter("groupBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDashboardGetSalesTotalValue_Result>("spDashboardGetSalesTotalValue", fromDateParameter, toDateParameter, groupByParameter);
        }
    
        public virtual ObjectResult<Commission> spGetCommissionByEmployeeId(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Commission>("spGetCommissionByEmployeeId", employeeIdParameter);
        }
    
        public virtual ObjectResult<Commission> spGetCommissionByEmployeeId(Nullable<int> employeeId, MergeOption mergeOption)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Commission>("spGetCommissionByEmployeeId", mergeOption, employeeIdParameter);
        }
    
        public virtual ObjectResult<spGetDashboardStats_Result> spGetDashboardStats()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetDashboardStats_Result>("spGetDashboardStats");
        }
    
        public virtual ObjectResult<spGetPaymentListByDateRange_Result> spGetPaymentListByDateRange(string lstartDate, string lendDate)
        {
            var lstartDateParameter = lstartDate != null ?
                new ObjectParameter("lstartDate", lstartDate) :
                new ObjectParameter("lstartDate", typeof(string));
    
            var lendDateParameter = lendDate != null ?
                new ObjectParameter("lendDate", lendDate) :
                new ObjectParameter("lendDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetPaymentListByDateRange_Result>("spGetPaymentListByDateRange", lstartDateParameter, lendDateParameter);
        }
    
        public virtual ObjectResult<Sale> spGetSalesByCommissionEmployeeId(string employeeId)
        {
            var employeeIdParameter = employeeId != null ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sale>("spGetSalesByCommissionEmployeeId", employeeIdParameter);
        }
    
        public virtual ObjectResult<Sale> spGetSalesByCommissionEmployeeId(string employeeId, MergeOption mergeOption)
        {
            var employeeIdParameter = employeeId != null ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sale>("spGetSalesByCommissionEmployeeId", mergeOption, employeeIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spCommissionPaymentDetailInsert(Nullable<int> commissionPaymentID, Nullable<int> salesID, Nullable<int> employeeID, Nullable<int> roleID, Nullable<int> commissionID, Nullable<decimal> amount, string remark)
        {
            var commissionPaymentIDParameter = commissionPaymentID.HasValue ?
                new ObjectParameter("CommissionPaymentID", commissionPaymentID) :
                new ObjectParameter("CommissionPaymentID", typeof(int));
    
            var salesIDParameter = salesID.HasValue ?
                new ObjectParameter("SalesID", salesID) :
                new ObjectParameter("SalesID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var commissionIDParameter = commissionID.HasValue ?
                new ObjectParameter("CommissionID", commissionID) :
                new ObjectParameter("CommissionID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spCommissionPaymentDetailInsert", commissionPaymentIDParameter, salesIDParameter, employeeIDParameter, roleIDParameter, commissionIDParameter, amountParameter, remarkParameter);
        }
    
        public virtual int spCommissionPaymentDetailUpdate(Nullable<int> iD, Nullable<int> commissionPaymentID, Nullable<int> salesID, Nullable<int> employeeID, Nullable<int> roleID, Nullable<int> commissionID, Nullable<decimal> amount, string remark)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var commissionPaymentIDParameter = commissionPaymentID.HasValue ?
                new ObjectParameter("CommissionPaymentID", commissionPaymentID) :
                new ObjectParameter("CommissionPaymentID", typeof(int));
    
            var salesIDParameter = salesID.HasValue ?
                new ObjectParameter("SalesID", salesID) :
                new ObjectParameter("SalesID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var commissionIDParameter = commissionID.HasValue ?
                new ObjectParameter("CommissionID", commissionID) :
                new ObjectParameter("CommissionID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCommissionPaymentDetailUpdate", iDParameter, commissionPaymentIDParameter, salesIDParameter, employeeIDParameter, roleIDParameter, commissionIDParameter, amountParameter, remarkParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spCommissionPaymentInsert(Nullable<System.DateTime> issuedDate, Nullable<System.DateTime> preparedDate, Nullable<System.DateTime> approvedDate, Nullable<decimal> amount, string bankPaymentNo, Nullable<System.DateTime> bankPaymentDate, Nullable<int> status, Nullable<bool> isVoid, Nullable<int> preparingUser, Nullable<int> preparingDevice, Nullable<int> approvingUser, Nullable<int> approvingDevice, string remark)
        {
            var issuedDateParameter = issuedDate.HasValue ?
                new ObjectParameter("IssuedDate", issuedDate) :
                new ObjectParameter("IssuedDate", typeof(System.DateTime));
    
            var preparedDateParameter = preparedDate.HasValue ?
                new ObjectParameter("PreparedDate", preparedDate) :
                new ObjectParameter("PreparedDate", typeof(System.DateTime));
    
            var approvedDateParameter = approvedDate.HasValue ?
                new ObjectParameter("ApprovedDate", approvedDate) :
                new ObjectParameter("ApprovedDate", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var bankPaymentNoParameter = bankPaymentNo != null ?
                new ObjectParameter("BankPaymentNo", bankPaymentNo) :
                new ObjectParameter("BankPaymentNo", typeof(string));
    
            var bankPaymentDateParameter = bankPaymentDate.HasValue ?
                new ObjectParameter("BankPaymentDate", bankPaymentDate) :
                new ObjectParameter("BankPaymentDate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var isVoidParameter = isVoid.HasValue ?
                new ObjectParameter("IsVoid", isVoid) :
                new ObjectParameter("IsVoid", typeof(bool));
    
            var preparingUserParameter = preparingUser.HasValue ?
                new ObjectParameter("PreparingUser", preparingUser) :
                new ObjectParameter("PreparingUser", typeof(int));
    
            var preparingDeviceParameter = preparingDevice.HasValue ?
                new ObjectParameter("PreparingDevice", preparingDevice) :
                new ObjectParameter("PreparingDevice", typeof(int));
    
            var approvingUserParameter = approvingUser.HasValue ?
                new ObjectParameter("ApprovingUser", approvingUser) :
                new ObjectParameter("ApprovingUser", typeof(int));
    
            var approvingDeviceParameter = approvingDevice.HasValue ?
                new ObjectParameter("ApprovingDevice", approvingDevice) :
                new ObjectParameter("ApprovingDevice", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spCommissionPaymentInsert", issuedDateParameter, preparedDateParameter, approvedDateParameter, amountParameter, bankPaymentNoParameter, bankPaymentDateParameter, statusParameter, isVoidParameter, preparingUserParameter, preparingDeviceParameter, approvingUserParameter, approvingDeviceParameter, remarkParameter);
        }
    
        public virtual int spCommissionPaymentUpdate(Nullable<int> iD, Nullable<System.DateTime> issuedDate, Nullable<System.DateTime> preparedDate, Nullable<System.DateTime> approvedDate, Nullable<decimal> amount, string bankPaymentNo, Nullable<System.DateTime> bankPaymentDate, Nullable<int> status, Nullable<bool> isVoid, Nullable<int> preparingUser, Nullable<int> preparingDevice, Nullable<int> approvingUser, Nullable<int> approvingDevice, string remark)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var issuedDateParameter = issuedDate.HasValue ?
                new ObjectParameter("IssuedDate", issuedDate) :
                new ObjectParameter("IssuedDate", typeof(System.DateTime));
    
            var preparedDateParameter = preparedDate.HasValue ?
                new ObjectParameter("PreparedDate", preparedDate) :
                new ObjectParameter("PreparedDate", typeof(System.DateTime));
    
            var approvedDateParameter = approvedDate.HasValue ?
                new ObjectParameter("ApprovedDate", approvedDate) :
                new ObjectParameter("ApprovedDate", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var bankPaymentNoParameter = bankPaymentNo != null ?
                new ObjectParameter("BankPaymentNo", bankPaymentNo) :
                new ObjectParameter("BankPaymentNo", typeof(string));
    
            var bankPaymentDateParameter = bankPaymentDate.HasValue ?
                new ObjectParameter("BankPaymentDate", bankPaymentDate) :
                new ObjectParameter("BankPaymentDate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var isVoidParameter = isVoid.HasValue ?
                new ObjectParameter("IsVoid", isVoid) :
                new ObjectParameter("IsVoid", typeof(bool));
    
            var preparingUserParameter = preparingUser.HasValue ?
                new ObjectParameter("PreparingUser", preparingUser) :
                new ObjectParameter("PreparingUser", typeof(int));
    
            var preparingDeviceParameter = preparingDevice.HasValue ?
                new ObjectParameter("PreparingDevice", preparingDevice) :
                new ObjectParameter("PreparingDevice", typeof(int));
    
            var approvingUserParameter = approvingUser.HasValue ?
                new ObjectParameter("ApprovingUser", approvingUser) :
                new ObjectParameter("ApprovingUser", typeof(int));
    
            var approvingDeviceParameter = approvingDevice.HasValue ?
                new ObjectParameter("ApprovingDevice", approvingDevice) :
                new ObjectParameter("ApprovingDevice", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCommissionPaymentUpdate", iDParameter, issuedDateParameter, preparedDateParameter, approvedDateParameter, amountParameter, bankPaymentNoParameter, bankPaymentDateParameter, statusParameter, isVoidParameter, preparingUserParameter, preparingDeviceParameter, approvingUserParameter, approvingDeviceParameter, remarkParameter);
        }
    
        public virtual int spCommissionStatusUpdate(Nullable<int> iD, Nullable<int> status)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCommissionStatusUpdate", iDParameter, statusParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spApproveCommissionPayment(Nullable<int> iD, string bankPaymentNo, Nullable<System.DateTime> bankPaymentDate, Nullable<System.DateTime> approvedDate, Nullable<int> approvingUser, Nullable<int> approvingDevice)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var bankPaymentNoParameter = bankPaymentNo != null ?
                new ObjectParameter("BankPaymentNo", bankPaymentNo) :
                new ObjectParameter("BankPaymentNo", typeof(string));
    
            var bankPaymentDateParameter = bankPaymentDate.HasValue ?
                new ObjectParameter("BankPaymentDate", bankPaymentDate) :
                new ObjectParameter("BankPaymentDate", typeof(System.DateTime));
    
            var approvedDateParameter = approvedDate.HasValue ?
                new ObjectParameter("ApprovedDate", approvedDate) :
                new ObjectParameter("ApprovedDate", typeof(System.DateTime));
    
            var approvingUserParameter = approvingUser.HasValue ?
                new ObjectParameter("ApprovingUser", approvingUser) :
                new ObjectParameter("ApprovingUser", typeof(int));
    
            var approvingDeviceParameter = approvingDevice.HasValue ?
                new ObjectParameter("ApprovingDevice", approvingDevice) :
                new ObjectParameter("ApprovingDevice", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spApproveCommissionPayment", iDParameter, bankPaymentNoParameter, bankPaymentDateParameter, approvedDateParameter, approvingUserParameter, approvingDeviceParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spSalesInsert(string code, Nullable<int> type, Nullable<System.DateTime> date, Nullable<decimal> total, Nullable<decimal> vAT, Nullable<decimal> ad, Nullable<decimal> firstPayment, Nullable<decimal> regFee, string fAName, string sAName, string ethCity, string ethSubCity, string ethWoreda, string ethHouseNo, string ethHomePhone, string ethMobileNo, string ethEmail, string country, string city, string pOBox, string streetCode, string homePhone, string mobilePhone, string email, string site, string buildingNo, Nullable<int> floorNo, string houseNo, Nullable<int> houseType, Nullable<decimal> area, Nullable<int> bedRoom, Nullable<bool> isActive, Nullable<int> status, Nullable<int> prepareuserID, Nullable<int> preparedeviceID, Nullable<int> approveuserID, Nullable<int> approvedeviceID, string remark)
        {
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            var vATParameter = vAT.HasValue ?
                new ObjectParameter("VAT", vAT) :
                new ObjectParameter("VAT", typeof(decimal));
    
            var adParameter = ad.HasValue ?
                new ObjectParameter("Ad", ad) :
                new ObjectParameter("Ad", typeof(decimal));
    
            var firstPaymentParameter = firstPayment.HasValue ?
                new ObjectParameter("FirstPayment", firstPayment) :
                new ObjectParameter("FirstPayment", typeof(decimal));
    
            var regFeeParameter = regFee.HasValue ?
                new ObjectParameter("RegFee", regFee) :
                new ObjectParameter("RegFee", typeof(decimal));
    
            var fANameParameter = fAName != null ?
                new ObjectParameter("FAName", fAName) :
                new ObjectParameter("FAName", typeof(string));
    
            var sANameParameter = sAName != null ?
                new ObjectParameter("SAName", sAName) :
                new ObjectParameter("SAName", typeof(string));
    
            var ethCityParameter = ethCity != null ?
                new ObjectParameter("EthCity", ethCity) :
                new ObjectParameter("EthCity", typeof(string));
    
            var ethSubCityParameter = ethSubCity != null ?
                new ObjectParameter("EthSubCity", ethSubCity) :
                new ObjectParameter("EthSubCity", typeof(string));
    
            var ethWoredaParameter = ethWoreda != null ?
                new ObjectParameter("EthWoreda", ethWoreda) :
                new ObjectParameter("EthWoreda", typeof(string));
    
            var ethHouseNoParameter = ethHouseNo != null ?
                new ObjectParameter("EthHouseNo", ethHouseNo) :
                new ObjectParameter("EthHouseNo", typeof(string));
    
            var ethHomePhoneParameter = ethHomePhone != null ?
                new ObjectParameter("EthHomePhone", ethHomePhone) :
                new ObjectParameter("EthHomePhone", typeof(string));
    
            var ethMobileNoParameter = ethMobileNo != null ?
                new ObjectParameter("EthMobileNo", ethMobileNo) :
                new ObjectParameter("EthMobileNo", typeof(string));
    
            var ethEmailParameter = ethEmail != null ?
                new ObjectParameter("EthEmail", ethEmail) :
                new ObjectParameter("EthEmail", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var pOBoxParameter = pOBox != null ?
                new ObjectParameter("POBox", pOBox) :
                new ObjectParameter("POBox", typeof(string));
    
            var streetCodeParameter = streetCode != null ?
                new ObjectParameter("StreetCode", streetCode) :
                new ObjectParameter("StreetCode", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var mobilePhoneParameter = mobilePhone != null ?
                new ObjectParameter("MobilePhone", mobilePhone) :
                new ObjectParameter("MobilePhone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var siteParameter = site != null ?
                new ObjectParameter("Site", site) :
                new ObjectParameter("Site", typeof(string));
    
            var buildingNoParameter = buildingNo != null ?
                new ObjectParameter("BuildingNo", buildingNo) :
                new ObjectParameter("BuildingNo", typeof(string));
    
            var floorNoParameter = floorNo.HasValue ?
                new ObjectParameter("FloorNo", floorNo) :
                new ObjectParameter("FloorNo", typeof(int));
    
            var houseNoParameter = houseNo != null ?
                new ObjectParameter("HouseNo", houseNo) :
                new ObjectParameter("HouseNo", typeof(string));
    
            var houseTypeParameter = houseType.HasValue ?
                new ObjectParameter("HouseType", houseType) :
                new ObjectParameter("HouseType", typeof(int));
    
            var areaParameter = area.HasValue ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(decimal));
    
            var bedRoomParameter = bedRoom.HasValue ?
                new ObjectParameter("BedRoom", bedRoom) :
                new ObjectParameter("BedRoom", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var prepareuserIDParameter = prepareuserID.HasValue ?
                new ObjectParameter("PrepareuserID", prepareuserID) :
                new ObjectParameter("PrepareuserID", typeof(int));
    
            var preparedeviceIDParameter = preparedeviceID.HasValue ?
                new ObjectParameter("PreparedeviceID", preparedeviceID) :
                new ObjectParameter("PreparedeviceID", typeof(int));
    
            var approveuserIDParameter = approveuserID.HasValue ?
                new ObjectParameter("ApproveuserID", approveuserID) :
                new ObjectParameter("ApproveuserID", typeof(int));
    
            var approvedeviceIDParameter = approvedeviceID.HasValue ?
                new ObjectParameter("ApprovedeviceID", approvedeviceID) :
                new ObjectParameter("ApprovedeviceID", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spSalesInsert", codeParameter, typeParameter, dateParameter, totalParameter, vATParameter, adParameter, firstPaymentParameter, regFeeParameter, fANameParameter, sANameParameter, ethCityParameter, ethSubCityParameter, ethWoredaParameter, ethHouseNoParameter, ethHomePhoneParameter, ethMobileNoParameter, ethEmailParameter, countryParameter, cityParameter, pOBoxParameter, streetCodeParameter, homePhoneParameter, mobilePhoneParameter, emailParameter, siteParameter, buildingNoParameter, floorNoParameter, houseNoParameter, houseTypeParameter, areaParameter, bedRoomParameter, isActiveParameter, statusParameter, prepareuserIDParameter, preparedeviceIDParameter, approveuserIDParameter, approvedeviceIDParameter, remarkParameter);
        }
    
        public virtual int spSalesUpdate(Nullable<int> iD, string code, Nullable<int> type, Nullable<System.DateTime> date, Nullable<decimal> total, Nullable<decimal> vAT, Nullable<decimal> ad, Nullable<decimal> firstPayment, Nullable<decimal> regFee, string fAName, string sAName, string ethCity, string ethSubCity, string ethWoreda, string ethHouseNo, string ethHomePhone, string ethMobileNo, string ethEmail, string country, string city, string pOBox, string streetCode, string homePhone, string mobilePhone, string email, string site, string buildingNo, Nullable<int> floorNo, string houseNo, Nullable<int> houseType, Nullable<decimal> area, Nullable<int> bedRoom, Nullable<bool> isActive, Nullable<int> status, Nullable<int> prepareuserID, Nullable<int> preparedeviceID, Nullable<int> approveuserID, Nullable<int> approvedeviceID, string remark)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            var vATParameter = vAT.HasValue ?
                new ObjectParameter("VAT", vAT) :
                new ObjectParameter("VAT", typeof(decimal));
    
            var adParameter = ad.HasValue ?
                new ObjectParameter("Ad", ad) :
                new ObjectParameter("Ad", typeof(decimal));
    
            var firstPaymentParameter = firstPayment.HasValue ?
                new ObjectParameter("FirstPayment", firstPayment) :
                new ObjectParameter("FirstPayment", typeof(decimal));
    
            var regFeeParameter = regFee.HasValue ?
                new ObjectParameter("RegFee", regFee) :
                new ObjectParameter("RegFee", typeof(decimal));
    
            var fANameParameter = fAName != null ?
                new ObjectParameter("FAName", fAName) :
                new ObjectParameter("FAName", typeof(string));
    
            var sANameParameter = sAName != null ?
                new ObjectParameter("SAName", sAName) :
                new ObjectParameter("SAName", typeof(string));
    
            var ethCityParameter = ethCity != null ?
                new ObjectParameter("EthCity", ethCity) :
                new ObjectParameter("EthCity", typeof(string));
    
            var ethSubCityParameter = ethSubCity != null ?
                new ObjectParameter("EthSubCity", ethSubCity) :
                new ObjectParameter("EthSubCity", typeof(string));
    
            var ethWoredaParameter = ethWoreda != null ?
                new ObjectParameter("EthWoreda", ethWoreda) :
                new ObjectParameter("EthWoreda", typeof(string));
    
            var ethHouseNoParameter = ethHouseNo != null ?
                new ObjectParameter("EthHouseNo", ethHouseNo) :
                new ObjectParameter("EthHouseNo", typeof(string));
    
            var ethHomePhoneParameter = ethHomePhone != null ?
                new ObjectParameter("EthHomePhone", ethHomePhone) :
                new ObjectParameter("EthHomePhone", typeof(string));
    
            var ethMobileNoParameter = ethMobileNo != null ?
                new ObjectParameter("EthMobileNo", ethMobileNo) :
                new ObjectParameter("EthMobileNo", typeof(string));
    
            var ethEmailParameter = ethEmail != null ?
                new ObjectParameter("EthEmail", ethEmail) :
                new ObjectParameter("EthEmail", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var pOBoxParameter = pOBox != null ?
                new ObjectParameter("POBox", pOBox) :
                new ObjectParameter("POBox", typeof(string));
    
            var streetCodeParameter = streetCode != null ?
                new ObjectParameter("StreetCode", streetCode) :
                new ObjectParameter("StreetCode", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var mobilePhoneParameter = mobilePhone != null ?
                new ObjectParameter("MobilePhone", mobilePhone) :
                new ObjectParameter("MobilePhone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var siteParameter = site != null ?
                new ObjectParameter("Site", site) :
                new ObjectParameter("Site", typeof(string));
    
            var buildingNoParameter = buildingNo != null ?
                new ObjectParameter("BuildingNo", buildingNo) :
                new ObjectParameter("BuildingNo", typeof(string));
    
            var floorNoParameter = floorNo.HasValue ?
                new ObjectParameter("FloorNo", floorNo) :
                new ObjectParameter("FloorNo", typeof(int));
    
            var houseNoParameter = houseNo != null ?
                new ObjectParameter("HouseNo", houseNo) :
                new ObjectParameter("HouseNo", typeof(string));
    
            var houseTypeParameter = houseType.HasValue ?
                new ObjectParameter("HouseType", houseType) :
                new ObjectParameter("HouseType", typeof(int));
    
            var areaParameter = area.HasValue ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(decimal));
    
            var bedRoomParameter = bedRoom.HasValue ?
                new ObjectParameter("BedRoom", bedRoom) :
                new ObjectParameter("BedRoom", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var prepareuserIDParameter = prepareuserID.HasValue ?
                new ObjectParameter("PrepareuserID", prepareuserID) :
                new ObjectParameter("PrepareuserID", typeof(int));
    
            var preparedeviceIDParameter = preparedeviceID.HasValue ?
                new ObjectParameter("PreparedeviceID", preparedeviceID) :
                new ObjectParameter("PreparedeviceID", typeof(int));
    
            var approveuserIDParameter = approveuserID.HasValue ?
                new ObjectParameter("ApproveuserID", approveuserID) :
                new ObjectParameter("ApproveuserID", typeof(int));
    
            var approvedeviceIDParameter = approvedeviceID.HasValue ?
                new ObjectParameter("ApprovedeviceID", approvedeviceID) :
                new ObjectParameter("ApprovedeviceID", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSalesUpdate", iDParameter, codeParameter, typeParameter, dateParameter, totalParameter, vATParameter, adParameter, firstPaymentParameter, regFeeParameter, fANameParameter, sANameParameter, ethCityParameter, ethSubCityParameter, ethWoredaParameter, ethHouseNoParameter, ethHomePhoneParameter, ethMobileNoParameter, ethEmailParameter, countryParameter, cityParameter, pOBoxParameter, streetCodeParameter, homePhoneParameter, mobilePhoneParameter, emailParameter, siteParameter, buildingNoParameter, floorNoParameter, houseNoParameter, houseTypeParameter, areaParameter, bedRoomParameter, isActiveParameter, statusParameter, prepareuserIDParameter, preparedeviceIDParameter, approveuserIDParameter, approvedeviceIDParameter, remarkParameter);
        }
    
        public virtual ObjectResult<Sale> spGetSalesByStatus(Nullable<int> status)
        {
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sale>("spGetSalesByStatus", statusParameter);
        }
    
        public virtual ObjectResult<Sale> spGetSalesByStatus(Nullable<int> status, MergeOption mergeOption)
        {
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sale>("spGetSalesByStatus", mergeOption, statusParameter);
        }
    
        public virtual ObjectResult<spGetCommissionDetail_Result> spGetCommissionDetail(Nullable<int> employeeID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCommissionDetail_Result>("spGetCommissionDetail", employeeIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<spGetCommissionPaymentsAndDetails_Result> spGetCommissionPaymentsAndDetails(Nullable<int> status, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCommissionPaymentsAndDetails_Result>("spGetCommissionPaymentsAndDetails", statusParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<spGetPaidCommissionReport_Result> spGetPaidCommissionReport(Nullable<int> empId, string bankPayNo, Nullable<System.DateTime> start, Nullable<System.DateTime> end)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var bankPayNoParameter = bankPayNo != null ?
                new ObjectParameter("BankPayNo", bankPayNo) :
                new ObjectParameter("BankPayNo", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetPaidCommissionReport_Result>("spGetPaidCommissionReport", empIdParameter, bankPayNoParameter, startParameter, endParameter);
        }
    
        public virtual ObjectResult<spGetEmployeeCommissionSummary_Result> spGetEmployeeCommissionSummary(Nullable<int> empId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetEmployeeCommissionSummary_Result>("spGetEmployeeCommissionSummary", empIdParameter);
        }
    }
}
